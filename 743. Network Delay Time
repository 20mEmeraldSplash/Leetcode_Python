import heapq
class Solution(object):
    def networkDelayTime(self, times, n, k):
        """
        :type times: List[List[int]]
        :type n: int
        :type k: int
        :rtype: int
        """
        graph = {}
        for u,v,w in times:
            if u not in graph:
                graph[u] = []
            graph[u].append((v,w))

        distance = [float('inf')] * (n+1)
        distance[k] = 0
        priority_queue = [(0,k)]

        while priority_queue:
            dist, node = heapq.heappop(priority_queue)
            if dist > distance[node]:
                continue
            for neighbor, weight in graph.get(node, []):
                new_dist = dist + weight
                if new_dist < distance[neighbor]:
                    distance[neighbor] = new_dist
                    heapq.heappush(priority_queue,(new_dist, neighbor)) #什么玩意

        max_dist = max(distance[1:])
        return max_dist if max_dist < float('inf') else -1
